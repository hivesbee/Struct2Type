{"version":3,"sources":["generator.js","App.js","serviceWorker.js","index.js","gopher.svg"],"names":["typeSwitchMap","generate","json","head","name","fields","filter","f","type","tag","map","replace","split","join","App","props","state","structText","typeText","handleStructTextChange","bind","handleTranspileClick","event","this","setState","target","value","astString","parseStruct","typeLines","JSON","parse","className","placeholder","wrap","onChange","readOnly","src","gopher","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"uUAAMA,EAAgB,CACpB,KAAQ,UACR,IAAO,SACP,aAAc,UAMVC,EAAW,SAACC,GAChB,IAGMC,EAAI,eAAWD,EAAKE,KAAhB,QAGNC,EAAS,GAWb,OAVIH,EAAKG,SACPA,EAASH,EAAKG,OACXC,QAAO,SAAAC,GAAC,OAAIA,EAAEH,MAAQG,EAAEC,MAAQD,EAAEE,OAClCC,KAAI,SAAAH,GACH,IAfgBC,EAeVJ,EAAOG,EAAEE,IAAIE,QAAQ,SAAU,IAAIC,MAAM,KAAK,GAEpD,MAAM,KAAN,OAAYR,EAAZ,cAjBgBI,EAiBoBD,EAAEC,KAjBbR,EAAcQ,IAASA,QAqB/C,CAACL,GAAD,mBAAUE,GAAV,CAAkB,MAAKQ,KAAK,OCgDtBC,E,YArEb,WAAaC,GAAQ,IAAD,8BAClB,4CAAMA,KAEDC,MAAQ,CACXC,WAAY,GACZC,SAAU,IAGZ,EAAKC,uBAAyB,EAAKA,uBAAuBC,KAA5B,gBAC9B,EAAKC,qBAAuB,EAAKA,qBAAqBD,KAA1B,gBATV,E,oFAYUE,G,6EAC5BC,KAAKC,SAAS,CACZP,WAAYK,EAAMG,OAAOC,QAGA,KAAvBJ,EAAMG,OAAOC,M,uBACfH,KAAKC,SAAS,CACZN,SAAU,K,0BAMRS,EAAYC,YAAYN,EAAMG,OAAOC,OACrCG,EAAY5B,EAAS6B,KAAKC,MAAMJ,IAEtCJ,KAAKC,SAAS,CACZN,SAAUW,I,4FAIQP,M,+BAIpB,OACE,yBAAKU,UAAU,OACb,4BAAQA,UAAU,cAChB,8CAEF,0BAAMA,UAAU,YACd,8BACEA,UAAU,sBACVC,YAAY,6GACZC,KAAK,MACLR,MAAOH,KAAKP,MAAMC,WAClBkB,SAAUZ,KAAKJ,yBAEjB,0BAAMa,UAAU,mBAAhB,gBACA,8BACEA,UAAU,oBACVC,YAAY,mGACZC,KAAK,MACLE,UAAQ,EACRV,MAAOH,KAAKP,MAAME,YAGtB,yBAAKmB,IAAKC,IAAQN,UAAU,eAC5B,uBAAGA,UAAU,iBAAb,6BAC0B,uBAAGO,KAAK,gCAAR,gBAD1B,IACkF,6BADlF,iCAE8B,uBAAGA,KAAK,oCAAR,gBAF9B,U,GA7DUC,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kBErInBC,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.14d1ebad.chunk.js","sourcesContent":["const typeSwitchMap = {\n  'bool': 'boolean',\n  'int': 'number',\n  '*time.Time': 'string'\n}\n\nconst switchTypeName = (type) => typeSwitchMap[type] || type\n\n\nconst generate = (json) => {\n  const lines = []\n\n  // type 定義\n  const head = `type ${json.name} = {`\n\n  // field 定義\n  let fields = []\n  if (json.fields) {\n    fields = json.fields\n      .filter(f => f.name && f.type && f.tag)\n      .map(f => {\n        const name = f.tag.replace(/'|\"|`/g, '').split(':')[1]\n        \n        return `  ${name}: ${switchTypeName(f.type)}`\n      })\n  }\n\n  return [head, ...fields, '}'].join('\\n')\n}\n\nexport {\n  generate\n}","import React from 'react'\nimport './App.css'\nimport gopher from './gopher.svg'\nimport { generate } from './generator'\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props)\n\n    this.state = {\n      structText: '',\n      typeText: ''\n    }\n\n    this.handleStructTextChange = this.handleStructTextChange.bind(this)\n    this.handleTranspileClick = this.handleTranspileClick.bind(this)\n  }\n\n  async handleStructTextChange (event) {\n    this.setState({\n      structText: event.target.value\n    })\n\n    if (event.target.value === '') {\n      this.setState({\n        typeText: ''\n      })\n\n      return\n    }\n\n    const astString = parseStruct(event.target.value) // eslint-disable-line no-undef\n    const typeLines = generate(JSON.parse(astString))\n\n    this.setState({\n      typeText: typeLines\n    })\n  }\n\n  handleTranspileClick (event) {\n  }\n\n  render () {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Struct 2 Type</h1>\n        </header>\n        <main className=\"App-main\">\n          <textarea\n            className=\"App-textarea-struct\"\n            placeholder=\"こちらに golang の struct をコピペしてください\"\n            wrap=\"off\"\n            value={this.state.structText}\n            onChange={this.handleStructTextChange}\n          />\n          <span className=\"App-arrow-right\">👉</span>\n          <textarea\n            className=\"App-textarea-type\"\n            placeholder=\"こちらに TypeScript の型定義がでてきます\"\n            wrap=\"off\"\n            readOnly\n            value={this.state.typeText}\n          />\n        </main>\n        <img src={gopher} className=\"App-gopher\" />\n        <p className=\"App-copyright\">\n        gopher.svg was created by <a href=\"https://twitter.com/tenntenn\">>Takuya Ueda</a>.<br />\n        The Go gopher was designed by <a href=\"http://reneefrench.blogspot.com/\">Renee French</a>.\n        </p>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/gopher.bbdb8be4.svg\";"],"sourceRoot":""}